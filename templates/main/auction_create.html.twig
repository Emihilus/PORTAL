{% extends 'base.html.twig' %}

{% block title %}Nowa aukcja{% endblock %}



{% block body %}

<h1>Formularz dodawania aukcji</h1>

 {{ form_start(form) }} 
{# <div class="my-custom-class-for-errors">
        {{ form_errors(form) }}
</div> #}
{# <pre>
    {{ dump(form) }}
</pre> #}


{{ form_row(form.title) }}
    <input id="upload-token" type="hidden" name="auction_create_form[token]">
    <input id="image-order" type="hidden" name="auction_create_form[image-order]">
{{ form_row(form.description) }}
{{ form_row(form.endsAt) }}

{{form_end(form)}}

   {# <input id="upload-file" type="file" name="imageFile"> #}


<div id="drop-area">
  <form class="my-form">
    <p>Upload multiple files with the file dialog or by dragging and dropping images onto the dashed region</p>
    <progress id="progress-bar" max=100 value=0></progress>

<div id="gallery"></div>
    <input type="file" id="fileElem" multiple accept="image/*" onchange="handleFiles(this.files)">
    <label class="button" for="fileElem">Select some files</label>
  </form>
</div>



{% endblock %}


{% block javascripts %}
{{ parent() }}
<script>
const TOKEN = Math.random().toString(36).replace(/[^a-z]+/g, '');
document.getElementById('upload-token').setAttribute('value', TOKEN)

let dropArea = document.getElementById('drop-area');

let uploadProgress = []
let filesDone = 0
let filesToDo = 0
let progressBar = document.getElementById('progress-bar')
let imgInitialIdentifier=0;


function previewFile(file, count, length) 
{
  let reader = new FileReader()
  reader.readAsDataURL(file)
  reader.onloadend = function() 
  {
    let previewContainer = document.createElement('div');
    let back = document.createElement('span');
    let next = document.createElement('span');
    previewContainer.className="preview-container";
    previewContainer.setAttribute("id", "iid-"+imgInitialIdentifier)
    imgInitialIdentifier++;

    count == 1 ? back.className="back-pbutton d-none" :  back.className="back-pbutton";
    back.innerHTML = "back";
    back.setAttribute("onclick", "reorder(false,"+count+")");
    previewContainer.appendChild(back);
    

    let img = document.createElement('img')
    img.src = reader.result
    previewContainer.appendChild(img);


    count == length ? next.className="next-pbutton d-none" : next.className="next-pbutton";
    next.innerHTML = "next";
    next.setAttribute("onclick", "reorder(true,"+count+")");
    previewContainer.appendChild(next);

    document.getElementById('gallery').appendChild(previewContainer)

  if(count == length)
      setTimeout(reassignOnclickButtons, 500);
  }
}

function reorder(isNext, clicked)
{
  let rootGallerySet = document.getElementById('gallery');
  let items = rootGallerySet.getElementsByClassName('preview-container');
  let copy = new Array();

  for(let i = 0; i< items.length; i++)
  {
    if(isNext)
    {
      if(i == clicked-1)
        copy[i] = items[i+1].cloneNode(true);
      else if (i-1 == clicked-1)
        copy[i] = items[i-1].cloneNode(true);
      else
        copy[i] = items[i].cloneNode(true);
    }
    else
    {
      if(i+1 == clicked-1)
        copy[i] = items[i+1].cloneNode(true);
      else if (i == clicked-1)
        copy[i] = items[i-1].cloneNode(true);
      else
        copy[i] = items[i].cloneNode(true);
    }

  }
    rootGallerySet.innerHTML = "";
    let counter = 1;
  copy.forEach((item) => 
  {

    rootGallerySet.appendChild(item);
    counter++;
  });

  reassignOnclickButtons();

}

function reassignOnclickButtons()
{
  console.log("REASSIGN");
  let rootGallerySet = document.getElementById('gallery');

  counter = 1;
  let setToReassignOnclickButtons = rootGallerySet.getElementsByClassName('next-pbutton');

  for (let item of setToReassignOnclickButtons) 
  {
    item.setAttribute("onclick", "reorder(true,"+counter+")");
    counter == setToReassignOnclickButtons.length ? item.className = 'next-pbutton d-none' : item.className = 'next-pbutton';
    counter++;
  }

  counter = 1;
  setToReassignOnclickButtons = rootGallerySet.getElementsByClassName('back-pbutton');

  for (let item of setToReassignOnclickButtons) 
  {
    item.setAttribute("onclick", "reorder(false,"+counter+")");
    counter == 1 ? item.className = 'back-pbutton d-none' : item.className = 'back-pbutton';
    counter++;
  }


  //let rootGallerySet = document.getElementById('gallery');
  let setToSaveNewOrder = rootGallerySet.getElementsByClassName('preview-container')
  let newOrder = "";
  for (let item of setToSaveNewOrder) 
  {
     newOrder+=","+item.getAttribute('id').substring(4);
  }
  newOrder = newOrder.substring(1);
  document.getElementById("image-order").set
}



;['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
  dropArea.addEventListener(eventName, preventDefaults, false)
})

function preventDefaults (e) {
  e.preventDefault()
  e.stopPropagation()
}

;['dragenter', 'dragover'].forEach(eventName => {
  dropArea.addEventListener(eventName, highlight, false)
})

;['dragleave', 'drop'].forEach(eventName => {
  dropArea.addEventListener(eventName, unhighlight, false)
})

function highlight(e) {
  dropArea.classList.add('highlight')
}

function unhighlight(e) {
  dropArea.classList.remove('highlight')
}

dropArea.addEventListener('drop', handleDrop, false)

function handleDrop(e) {
  let dt = e.dataTransfer
  let files = dt.files

  handleFiles(files)

}


function handleFiles(files) 
{
  let count = 1;
  files = [...files]
  initializeProgress(files.length) 
  files.forEach(uploadFile);
  files.forEach((file) => 
  {
    previewFile(file,count,files.length);
    count++;
  })
}



function uploadFile(file) 
{
  let url = "{{path ('uploadTemporary') }}"
  let formData = new FormData()

  formData.append('file', file)
  formData.append('TOKEN',TOKEN);

  //let dropArea = document.getElementById('drop-area')

  fetch(url, {
    method: 'POST',
    body: formData
  })
  .then((response) => {
      progressDone
      console.log(response)
      response.json().then(function(data) {
        console.log(data);
      });
  })
  .catch(() => { /* Error. Inform the user */ })
}



function initializeProgress(numfiles) {
  progressBar.value = 0
  filesDone = 0
  filesToDo = numfiles
}

function progressDone() {
  filesDone++
  progressBar.value = filesDone / filesToDo * 100
}

</script>
{% endblock %}