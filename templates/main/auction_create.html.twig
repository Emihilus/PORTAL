{% extends 'base.html.twig' %}

{% block title %}Nowa aukcja{% endblock %}



{% block body %}

<h1>Formularz dodawania aukcji</h1>

 {{ form_start(form) }} 
{# <div class="my-custom-class-for-errors">
        {{ form_errors(form) }}
</div> #}
{# <pre>
    {{ dump(form) }}
</pre> #}


{{ form_row(form.title) }}
    <input id="upload-token" type="hidden" name="auction_create_form[token]">
{{ form_row(form.description) }}
{{ form_row(form.endsAt) }}

{{form_end(form)}}

   {# <input id="upload-file" type="file" name="imageFile"> #}


<div id="drop-area">
  <form class="my-form">
    <p>Upload multiple files with the file dialog or by dragging and dropping images onto the dashed region</p>
    <progress id="progress-bar" max=100 value=0></progress>

<div id="gallery"></div>
    <input type="file" id="fileElem" multiple accept="image/*" onchange="handleFiles(this.files)">
    <label class="button" for="fileElem">Select some files</label>
  </form>
</div>


{# {{ form_row(form.Submit) }} #}

{% endblock %}


{% block javascripts %}
{{ parent() }}
<script>
/*let uploadElement = document.getElementById('upload-file');
uploadElement.addEventListener("change",e =>
{
    let files = e.target.files || e.dataTransfer.files;
    if(!files.length)
        console.log('no files'); 
    /*let product = document.getElementById("product");
    let product_id = product.options[product.selectedIndex].value;
    if(product_id == "") return;*/
    /*console.log(files);
    console.log(files[0].name);

    let filees = $('#upload-file').prop('files')[0];
    
    let formData = new FormData();
    formData.append('file', filees);
    console.log(formData);
    
    $.ajax({
		url: "{{path ('uploadTemporary') }}",
		method: "post", 
		dataType: "json",
        cache: false,
        contentType: false,
        processData: false,
		data: formData
	})
	.done(res => 
	{ 
		console.log(res);
	});

});*/
const TOKEN = Math.random().toString(36).replace(/[^a-z]+/g, '');
document.getElementById('upload-token').setAttribute('value', TOKEN)

let dropArea = document.getElementById('drop-area');

;['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
  dropArea.addEventListener(eventName, preventDefaults, false)
})

function preventDefaults (e) {
  e.preventDefault()
  e.stopPropagation()
}

;['dragenter', 'dragover'].forEach(eventName => {
  dropArea.addEventListener(eventName, highlight, false)
})

;['dragleave', 'drop'].forEach(eventName => {
  dropArea.addEventListener(eventName, unhighlight, false)
})

function highlight(e) {
  dropArea.classList.add('highlight')
}

function unhighlight(e) {
  dropArea.classList.remove('highlight')
}

dropArea.addEventListener('drop', handleDrop, false)

function handleDrop(e) {
  let dt = e.dataTransfer
  let files = dt.files

  handleFiles(files)
}


function handleFiles(files) 
{
  let count = 1;
  files = [...files]
  initializeProgress(files.length) 
  files.forEach((file)=> {
    uploadFile(file,count);
    count++; });
  files.forEach(previewFile)
}



function uploadFile(file) 
{
  let url = "{{path ('uploadTemporary') }}"
  let formData = new FormData()

  formData.append('file', file)
  formData.append('TOKEN',TOKEN);

  //let dropArea = document.getElementById('drop-area')

  fetch(url, {
    method: 'POST',
    body: formData
  })
  .then((response) => {
      progressDone
      console.log(response)
      response.json().then(function(data) {
        console.log(data);
      });
  })
  .catch(() => { /* Error. Inform the user */ })
}

function previewFile(file, count) 
{
  let reader = new FileReader()
  reader.readAsDataURL(file)
  reader.onloadend = function() 
  {
    let root = document.createElement('div');
    let back = document.createElement('span');
    let next = document.createElement('span');
    back.innerHTML = "back";
    back.addEventListener('click', () => 
    {
      //alert("SSZAPLERT");
      reorder(false, 1)
    });
    next.innerHTML = "next";
    let img = document.createElement('img')
    img.src = reader.result
    root.appendChild(back);
    root.appendChild(img);
    root.appendChild(next);
    document.getElementById('gallery').appendChild(root)
  }
}

function reorder(next, count)
{
  console.log("sadas");
  let set = document.getElementById('gallery');
  let items = set.querySelectorAll('div');
  // let copy = new Array(items.length);
  console.log(items);
  let anext,aprevious;
  for(let i = 0; i< items.length; i++)
  {

  console.log(items);
    if(i == count)
    items[i] = null;
  }
  console.log(items);
  items.forEach((item) => 
  {
console.log(item);
    document.getElementById('gallery').appendChild(item);
    
  });

}

let uploadProgress = []
let filesDone = 0
let filesToDo = 0
let progressBar = document.getElementById('progress-bar')

function initializeProgress(numfiles) {
  progressBar.value = 0
  filesDone = 0
  filesToDo = numfiles
}

function progressDone() {
  filesDone++
  progressBar.value = filesDone / filesToDo * 100
}

</script>
{% endblock %}